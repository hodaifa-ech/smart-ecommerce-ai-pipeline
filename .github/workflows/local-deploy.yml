name: Deploy to Local Minikube

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Python virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip setuptools wheel

    - name: Deploy to Local Minikube
      run: |
        # Clean up old deployments
        kubectl delete deployment --all -n ecommerce --ignore-not-found=true
        kubectl delete service --all -n ecommerce --ignore-not-found=true
        kubectl delete pod --all -n ecommerce --ignore-not-found=true
        kubectl delete pvc --all -n ecommerce --ignore-not-found=true
        
        # Wait for cleanup
        sleep 5

        # Create namespace if it doesn't exist
        kubectl create namespace ecommerce --dry-run=client -o yaml | kubectl apply -f -

        # Create GROQ secret
        kubectl create secret generic groq-secret \
            --namespace ecommerce \
            --from-literal=api-key="${{ secrets.GROQ_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

        # Deploy the application
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ecommerce-app
          namespace: ecommerce
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ecommerce-app
          template:
            metadata:
              labels:
                app: ecommerce-app
            spec:
              containers:
              - name: ecommerce-app
                image: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:latest
                ports:
                - containerPort: 8501
                env:
                - name: GROQ_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: groq-secret
                      key: api-key
        EOF

        # Create service
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: ecommerce-service
          namespace: ecommerce
        spec:
          selector:
            app: ecommerce-app
          ports:
          - port: 80
            targetPort: 8501
          type: NodePort
        EOF

        # Deploy Kubeflow pipeline
        kubectl apply -f kubeflow/kubeflow-deployment.yaml

      - name: Compile and Upload KFP Pipeline
      run: |
        source venv/bin/activate
        pip install -r requirements.txt # This will now work after fixing requirements.txt
        
        # Ensure upload_pipeline.py can import 'product_attractiveness_pipeline'
        # Add this import to kubeflow/upload_pipeline.py:
        # from pipeline import product_attractiveness_pipeline
        # (Assuming pipeline.py and upload_pipeline.py are in the kubeflow directory)
        
        # Compile the pipeline (optional if upload_pipeline.py also compiles)
        # python kubeflow/pipeline.py 

        # Upload the pipeline
        # The upload_pipeline.py script compiles and then uploads.
        # If pipeline.py already compiled it, upload_pipeline.py can be modified
        # to only upload the existing YAML.
        # For simplicity, assuming upload_pipeline.py handles compilation:
        python kubeflow/upload_pipeline.py
      # To run the pipeline, you would then call run_pipeline.py, possibly passing the ID
      # output by upload_pipeline.py. This step can be added if auto-execution is desired.

    - name: Verify Deployment
      run: |
        echo "Waiting for deployment to be ready..."
        kubectl rollout status deployment/ecommerce-app -n ecommerce --timeout=300s
        kubectl rollout status deployment/kubeflow-pipeline -n ecommerce --timeout=300s
        
        echo "Deployment status:"
        kubectl get pods -n ecommerce
        
        echo "Service status:"
        kubectl get svc -n ecommerce
        
        echo "Service URL:"
        minikube service ecommerce-service -n ecommerce --url
        
        echo "Kubeflow Pipeline URL:"
        minikube service kubeflow-pipeline-service -n ecommerce --url 