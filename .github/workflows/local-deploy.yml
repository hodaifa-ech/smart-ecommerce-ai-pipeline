name: Deploy to Local Minikube

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Python virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install -r requirements.txt

    - name: Clean up old deployments
      run: |
        kubectl delete deployment --all -n ecommerce --ignore-not-found=true
        kubectl delete service --all -n ecommerce --ignore-not-found=true
        kubectl delete pod --all -n ecommerce --ignore-not-found=true
        kubectl delete pvc --all -n ecommerce --ignore-not-found=true
        sleep 5

    - name: Create namespace and secrets
      run: |
        kubectl create namespace ecommerce --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic groq-secret \
            --namespace ecommerce \
            --from-literal=api-key="${{ secrets.GROQ_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Streamlit application
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ecommerce-app
          namespace: ecommerce
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ecommerce-app
          template:
            metadata:
              labels:
                app: ecommerce-app
            spec:
              containers:
              - name: ecommerce-app
                image: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:latest
                ports:
                - containerPort: 8501
                env:
                - name: GROQ_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: groq-secret
                      key: api-key
                resources:
                  requests:
                    memory: "512Mi"
                    cpu: "250m"
                  limits:
                    memory: "1Gi"
                    cpu: "500m"
        EOF

    - name: Create Streamlit service
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: ecommerce-service
          namespace: ecommerce
        spec:
          selector:
            app: ecommerce-app
          ports:
          - port: 80
            targetPort: 8501
          type: NodePort
        EOF

    - name: Deploy Kubeflow pipeline
      run: |
        # Create necessary directories for Kubeflow
        kubectl create configmap kubeflow-config \
            --namespace ecommerce \
            --from-file=kubeflow/pipeline.py \
            --dry-run=client -o yaml | kubectl apply -f -

        # Deploy Kubeflow pipeline
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: kubeflow-pipeline
          namespace: ecommerce
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: kubeflow-pipeline
          template:
            metadata:
              labels:
                app: kubeflow-pipeline
            spec:
              containers:
              - name: kubeflow-pipeline
                image: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-app:latest
                command: ["python"]
                args: ["/app/kubeflow/pipeline.py"]
                volumeMounts:
                - name: kubeflow-config
                  mountPath: /app/kubeflow
                resources:
                  requests:
                    memory: "1Gi"
                    cpu: "500m"
                  limits:
                    memory: "2Gi"
                    cpu: "1000m"
              volumes:
              - name: kubeflow-config
                configMap:
                  name: kubeflow-config
        EOF

    - name: Create Kubeflow service
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: kubeflow-pipeline-service
          namespace: ecommerce
        spec:
          selector:
            app: kubeflow-pipeline
          ports:
          - port: 80
            targetPort: 8080
          type: NodePort
        EOF

    - name: Verify Deployment
      run: |
        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/ecommerce-app -n ecommerce --timeout=300s
        kubectl rollout status deployment/kubeflow-pipeline -n ecommerce --timeout=300s
        
        echo "Deployment status:"
        kubectl get pods -n ecommerce
        
        echo "Service status:"
        kubectl get svc -n ecommerce
        
        echo "Streamlit Service URL:"
        minikube service ecommerce-service -n ecommerce --url
        
        echo "Kubeflow Pipeline Service URL:"
        minikube service kubeflow-pipeline-service -n ecommerce --url 